


OPTIONS:=


# Now it may be difficult to figure out how to handle all independent options for each alarm service globally.
# One can change
#
.PHONY: $(INSTALL_FILENAMES) $(SYSTEMD_FILENAMES) sd_config sd_install

	
sd_install: $(SYSTEMD_FILENAMES)
	$(QUIET)$(SUDO) systemctl daemon-reload

$(SYSTEMD_FILENAMES): sd_config
	$(QUIET)$(SUDO) install -b -m 644 $(SITE_TEMPLATE_PATH)/$@ $(SYSTEMD_PATH)/


## Generate the system default systemd unit file(s)
sd_config: $(INSTALL_FILENAMES)

sd_config_clean:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) rm -f $(SITE_TEMPLATE_PATH)/$(sd_unit);)


$(INSTALL_FILENAMES):
	$(eval $(if $(findstring alarm-server,$@), OPTIONS=$(OPTIONS_SERVER) -settings $(TARGET_ROOT)/$(basename $@)/settings.ini ))
	$(eval $(if $(findstring alarm-logger,$@), OPTIONS=$(OPTIONS_LOGGERS) ))
	$(eval $(if $(findstring alarm-config-logger,$@), OPTIONS=$(OPTIONS_CONFIG_LOGGER) ))
	$(if $(wildcard $(SITE_TEMPLATE_PATH)/$(basename $@).service),,$(QUIET)sed -e "s:@JAVAPATH@:$(JAVA_PATH):g" -e "s:@JAVAOPTS@:$(JAVA_OPTS):g" -e "s:@TARGET_NAME@:$@:g" -e "s|@DOCURL@|$(SRC_GITURL)|g"  -e "s|@TARGETPATH@|$(TARGET_ROOT)/$(basename $@)|g" -e "s|@TARGET_JAR_NAME@|$@|g"  -e "s|@OPTIONS@|$(OPTIONS)|g" < $(SITE_TEMPLATE_PATH)/sd.service.in > $(SITE_TEMPLATE_PATH)/$(basename $@).service)


.PHONY: sd_status sd_start sd_stop sd_restart sd_clean sd_enable 


sd_status:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl status -l  $(sd_unit) | cat;)

sd_start:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl start  $(sd_unit);)

sd_stop:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl stop  $(sd_unit);)

sd_restart:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl restart $(sd_unit);)

sd_clean:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) rm -f $(SYSTEMD_PATH)/$(sd_unit);)

sd_disable:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl disable $(sd_unit);)
	
sd_enable:
	$(QUIET)$(foreach sd_unit,$(SYSTEMD_FILENAMES), $(SUDO) systemctl enable $(sd_unit);)


.PHONY: install uninstall reinstall restart 


## Install Jar and systemd unit files
install: tg_install sd_install sd_enable
	$(QUIET)echo "----- Note that one should start it and check its status via "
	$(QUIET)echo "----- systemctl start  $(SYSTEMD_FILENAMES)"
	$(QUIET)echo "----- systemctl status $(SYSTEMD_FILENAMES)"


## Stop systemd service(s), remove all
uninstall: sd_stop sd_clean sd_config_clean tg_uninstall
ifeq "$(TARGET)" "all"
	$(QUIET)echo "Removing $(TARGET_ROOT)..."
	$(SUDO) rm -rf $(TARGET_ROOT)	   
endif

## Build and install
reinstall: uninstall install


restart: uninstall build sd_config_clean install sd_start sd_status

# ##

.PHONY:  tg_install tg_uninstall src_version $(INSTALL_LOCATIONS) $(TARGET_NAMES)


tg_install: $(INSTALL_LOCATIONS) $(TARGET_NAMES)
	$(QUIET) rm -f $(SITE_TEMPLATE_PATH)/.versions

tg_uninstall:
	$(QUIET)echo "Removing $(INSTALL_LOCATIONS)..."
	$(QUIET)$(SUDO) rm -rf $(INSTALL_LOCATIONS)

# alarm-server isn't the springboot application, so we have to move all lib/* into target
$(TARGET_NAMES): src_version 
	$(QUIET)$(SUDO) $(INSTALL) -d $(TARGET_ROOT)/$@
	$(QUIET)$(SUDO) $(INSTALL_DATA) -b $(SITE_TEMPLATE_PATH)/settings.ini $(TARGET_ROOT)/
	$(QUIET)$(SUDO) $(INSTALL_DATA) -b $(SITE_TEMPLATE_PATH)/.versions  $(TARGET_ROOT)/$@/
	$(QUIET)$(SUDO) $(INSTALL) -m 744 $(SRC_ROOT)/services/$@/target/service-$@-*.jar  $(TARGET_ROOT)/$@/$@.jar
	$(if $(findstring alarm-server,$@), $(QUIET)$(SUDO) cp -rp $(SRC_ROOT)/services/$@/target/lib  $(SITE_TEMPLATE_PATH)/settings.ini   $(TARGET_ROOT)/$@/)

	

src_version: FORCE
	$(QUIET)echo "Timestamps : $$(date +%Y%m%d-%H%M%S)/YYYYMMDD-HHMMSS" > $(SITE_TEMPLATE_PATH)/.versions
	$(QUIET)echo "- SRC URL : $(SRC_GITURL)"  >> $(SITE_TEMPLATE_PATH)/.versions
	$(QUIET)echo "- SRC VER : $(SRC_TAG)"     >> $(SITE_TEMPLATE_PATH)/.versions


FORCE:


VARS_EXCLUDES+=OPTIONS